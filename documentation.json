{
    "pipes": [],
    "interfaces": [
        {
            "name": "FileNode",
            "id": "interface-FileNode-72980a535049544240a788267809520563e4b029edf9e63ea0dfa73047b584fb689ee24c652a31f6d2218f2a6411ae8ae59d9d4ac3a88bfc5cab972e89fca689",
            "file": "src/app/protected/tree/tree.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component } from '@angular/core';\nimport { MatTreeModule, MatTreeFlatDataSource, MatTreeFlattener } from '@angular/material/tree';\nimport { FlatTreeControl } from '@angular/cdk/tree';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\nimport { files } from './example-data';\n\n/** File node data with possible child nodes. */\nexport interface FileNode {\n  name: string;\n  type: string;\n  children?: FileNode[];\n}\n\n/**\n * Flattened tree node that has been created from a FileNode through the flattener. Flattened\n * nodes include level index and whether they can be expanded or not.\n */\nexport interface FlatTreeNode {\n  name: string;\n  type: string;\n  level: number;\n  expandable: boolean;\n}\n\n@Component({\n  selector: 'app-tree',\n  templateUrl: './tree.component.html',\n  styleUrl: './tree.component.scss',\n  standalone: true,\n  imports: [MatTreeModule, MatButtonModule, MatIconModule]\n})\nexport class TreeComponent {\n\n  /** The TreeControl controls the expand/collapse state of tree nodes.  */\n  treeControl: FlatTreeControl<FlatTreeNode>;\n\n  /** The TreeFlattener is used to generate the flat list of items from hierarchical data. */\n  treeFlattener: MatTreeFlattener<FileNode, FlatTreeNode>;\n\n  /** The MatTreeFlatDataSource connects the control and flattener to provide data. */\n  dataSource: MatTreeFlatDataSource<FileNode, FlatTreeNode>;\n\n  constructor() {\n    this.treeFlattener = new MatTreeFlattener(\n      this.transformer,\n      this.getLevel,\n      this.isExpandable,\n      this.getChildren);\n\n    this.treeControl = new FlatTreeControl(this.getLevel, this.isExpandable);\n    this.dataSource = new MatTreeFlatDataSource(this.treeControl, this.treeFlattener);\n    this.dataSource.data = files;\n  }\n\n  /** Transform the data to something the tree can read. */\n  transformer(node: FileNode, level: number): FlatTreeNode {\n    return {\n      name: node.name,\n      type: node.type,\n      level,\n      expandable: !!node.children\n    };\n  }\n\n  /** Get the level of the node */\n  getLevel(node: FlatTreeNode): number {\n    return node.level;\n  }\n\n  /** Get whether the node is expanded or not. */\n  isExpandable(node: FlatTreeNode): boolean {\n    return node.expandable;\n  }\n\n  /** Get whether the node has children or not. */\n  hasChild(index: number, node: FlatTreeNode): boolean {\n    return node.expandable;\n  }\n\n  /** Get the children for the node. */\n  getChildren(node: FileNode): FileNode[] | null | undefined {\n    return node.children;\n  }\n}\n",
            "properties": [
                {
                    "name": "children",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FileNode[]",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "description": "<p>File node data with possible child nodes.</p>\n",
            "rawdescription": "\nFile node data with possible child nodes.",
            "methods": [],
            "extends": []
        },
        {
            "name": "FlatTreeNode",
            "id": "interface-FlatTreeNode-72980a535049544240a788267809520563e4b029edf9e63ea0dfa73047b584fb689ee24c652a31f6d2218f2a6411ae8ae59d9d4ac3a88bfc5cab972e89fca689",
            "file": "src/app/protected/tree/tree.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component } from '@angular/core';\nimport { MatTreeModule, MatTreeFlatDataSource, MatTreeFlattener } from '@angular/material/tree';\nimport { FlatTreeControl } from '@angular/cdk/tree';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\nimport { files } from './example-data';\n\n/** File node data with possible child nodes. */\nexport interface FileNode {\n  name: string;\n  type: string;\n  children?: FileNode[];\n}\n\n/**\n * Flattened tree node that has been created from a FileNode through the flattener. Flattened\n * nodes include level index and whether they can be expanded or not.\n */\nexport interface FlatTreeNode {\n  name: string;\n  type: string;\n  level: number;\n  expandable: boolean;\n}\n\n@Component({\n  selector: 'app-tree',\n  templateUrl: './tree.component.html',\n  styleUrl: './tree.component.scss',\n  standalone: true,\n  imports: [MatTreeModule, MatButtonModule, MatIconModule]\n})\nexport class TreeComponent {\n\n  /** The TreeControl controls the expand/collapse state of tree nodes.  */\n  treeControl: FlatTreeControl<FlatTreeNode>;\n\n  /** The TreeFlattener is used to generate the flat list of items from hierarchical data. */\n  treeFlattener: MatTreeFlattener<FileNode, FlatTreeNode>;\n\n  /** The MatTreeFlatDataSource connects the control and flattener to provide data. */\n  dataSource: MatTreeFlatDataSource<FileNode, FlatTreeNode>;\n\n  constructor() {\n    this.treeFlattener = new MatTreeFlattener(\n      this.transformer,\n      this.getLevel,\n      this.isExpandable,\n      this.getChildren);\n\n    this.treeControl = new FlatTreeControl(this.getLevel, this.isExpandable);\n    this.dataSource = new MatTreeFlatDataSource(this.treeControl, this.treeFlattener);\n    this.dataSource.data = files;\n  }\n\n  /** Transform the data to something the tree can read. */\n  transformer(node: FileNode, level: number): FlatTreeNode {\n    return {\n      name: node.name,\n      type: node.type,\n      level,\n      expandable: !!node.children\n    };\n  }\n\n  /** Get the level of the node */\n  getLevel(node: FlatTreeNode): number {\n    return node.level;\n  }\n\n  /** Get whether the node is expanded or not. */\n  isExpandable(node: FlatTreeNode): boolean {\n    return node.expandable;\n  }\n\n  /** Get whether the node has children or not. */\n  hasChild(index: number, node: FlatTreeNode): boolean {\n    return node.expandable;\n  }\n\n  /** Get the children for the node. */\n  getChildren(node: FileNode): FileNode[] | null | undefined {\n    return node.children;\n  }\n}\n",
            "properties": [
                {
                    "name": "expandable",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "level",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "description": "<p>Flattened tree node that has been created from a FileNode through the flattener. Flattened\nnodes include level index and whether they can be expanded or not.</p>\n",
            "rawdescription": "\n\nFlattened tree node that has been created from a FileNode through the flattener. Flattened\nnodes include level index and whether they can be expanded or not.\n",
            "methods": [],
            "extends": []
        },
        {
            "name": "IEnvironment",
            "id": "interface-IEnvironment-822cee143a6da5a90660124c3851a3e1179c6c66c650891bc4ed9a62ca2aa99bd38e3bbbaadd0c0d9284ec326c0259e60587da56a713292c127aad025e7ac42c",
            "file": "src/environments/env.types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IEnvironment {\n  production: boolean\n  apiUrl: string\n  version: string\n}\n",
            "properties": [
                {
                    "name": "apiUrl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "production",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "version",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "TableItem",
            "id": "interface-TableItem-acdce23c271e82416951dbd97bdcf7dd698a693cc5b9b79ef99ba7716519005c257fe32bd79d27c613dd010c2ecba129ea39837c270c95287b20e87ad736a787",
            "file": "src/app/protected/table/table-datasource.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { DataSource } from '@angular/cdk/collections';\nimport { MatPaginator } from '@angular/material/paginator';\nimport { MatSort } from '@angular/material/sort';\nimport { map } from 'rxjs/operators';\nimport { Observable, of as observableOf, merge } from 'rxjs';\n\n// TODO: Replace this with your own data model type\nexport interface TableItem {\n  name: string;\n  id: number;\n}\n\n// TODO: replace this with real data from your application\nconst EXAMPLE_DATA: TableItem[] = [\n  {id: 1, name: 'Hydrogen'},\n  {id: 2, name: 'Helium'},\n  {id: 3, name: 'Lithium'},\n  {id: 4, name: 'Beryllium'},\n  {id: 5, name: 'Boron'},\n  {id: 6, name: 'Carbon'},\n  {id: 7, name: 'Nitrogen'},\n  {id: 8, name: 'Oxygen'},\n  {id: 9, name: 'Fluorine'},\n  {id: 10, name: 'Neon'},\n  {id: 11, name: 'Sodium'},\n  {id: 12, name: 'Magnesium'},\n  {id: 13, name: 'Aluminum'},\n  {id: 14, name: 'Silicon'},\n  {id: 15, name: 'Phosphorus'},\n  {id: 16, name: 'Sulfur'},\n  {id: 17, name: 'Chlorine'},\n  {id: 18, name: 'Argon'},\n  {id: 19, name: 'Potassium'},\n  {id: 20, name: 'Calcium'},\n];\n\n/**\n * Data source for the Table view. This class should\n * encapsulate all logic for fetching and manipulating the displayed data\n * (including sorting, pagination, and filtering).\n */\nexport class TableDataSource extends DataSource<TableItem> {\n  data: TableItem[] = EXAMPLE_DATA;\n  paginator: MatPaginator | undefined;\n  sort: MatSort | undefined;\n\n  constructor() {\n    super();\n  }\n\n  /**\n   * Connect this data source to the table. The table will only update when\n   * the returned stream emits new items.\n   * @returns A stream of the items to be rendered.\n   */\n  connect(): Observable<TableItem[]> {\n    if (this.paginator && this.sort) {\n      // Combine everything that affects the rendered data into one update\n      // stream for the data-table to consume.\n      return merge(observableOf(this.data), this.paginator.page, this.sort.sortChange)\n        .pipe(map(() => {\n          return this.getPagedData(this.getSortedData([...this.data ]));\n        }));\n    } else {\n      throw Error('Please set the paginator and sort on the data source before connecting.');\n    }\n  }\n\n  /**\n   *  Called when the table is being destroyed. Use this function, to clean up\n   * any open connections or free any held resources that were set up during connect.\n   */\n  disconnect(): void {}\n\n  /**\n   * Paginate the data (client-side). If you're using server-side pagination,\n   * this would be replaced by requesting the appropriate data from the server.\n   */\n  private getPagedData(data: TableItem[]): TableItem[] {\n    if (this.paginator) {\n      const startIndex = this.paginator.pageIndex * this.paginator.pageSize;\n      return data.splice(startIndex, this.paginator.pageSize);\n    } else {\n      return data;\n    }\n  }\n\n  /**\n   * Sort the data (client-side). If you're using server-side sorting,\n   * this would be replaced by requesting the appropriate data from the server.\n   */\n  private getSortedData(data: TableItem[]): TableItem[] {\n    if (!this.sort || !this.sort.active || this.sort.direction === '') {\n      return data;\n    }\n\n    return data.sort((a, b) => {\n      const isAsc = this.sort?.direction === 'asc';\n      switch (this.sort?.active) {\n        case 'name': return compare(a.name, b.name, isAsc);\n        case 'id': return compare(+a.id, +b.id, isAsc);\n        default: return 0;\n      }\n    });\n  }\n}\n\n/** Simple sort comparator for example ID/Name columns (for client-side sorting). */\nfunction compare(a: string | number, b: string | number, isAsc: boolean): number {\n  return (a < b ? -1 : 1) * (isAsc ? 1 : -1);\n}\n",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "User",
            "id": "interface-User-d4821beac0e4a852e513391b7470981c4353fdd95a18628bb68136c8695b489ee15b926e2e5031bc26cf30e1508e0a362c3ee13a06734702b4d15af140e485d5",
            "file": "src/stories/user.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface User {\n  name: string;\n}\n",
            "properties": [
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        }
    ],
    "injectables": [],
    "guards": [],
    "interceptors": [],
    "classes": [
        {
            "name": "TableDataSource",
            "id": "class-TableDataSource-acdce23c271e82416951dbd97bdcf7dd698a693cc5b9b79ef99ba7716519005c257fe32bd79d27c613dd010c2ecba129ea39837c270c95287b20e87ad736a787",
            "file": "src/app/protected/table/table-datasource.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "import { DataSource } from '@angular/cdk/collections';\nimport { MatPaginator } from '@angular/material/paginator';\nimport { MatSort } from '@angular/material/sort';\nimport { map } from 'rxjs/operators';\nimport { Observable, of as observableOf, merge } from 'rxjs';\n\n// TODO: Replace this with your own data model type\nexport interface TableItem {\n  name: string;\n  id: number;\n}\n\n// TODO: replace this with real data from your application\nconst EXAMPLE_DATA: TableItem[] = [\n  {id: 1, name: 'Hydrogen'},\n  {id: 2, name: 'Helium'},\n  {id: 3, name: 'Lithium'},\n  {id: 4, name: 'Beryllium'},\n  {id: 5, name: 'Boron'},\n  {id: 6, name: 'Carbon'},\n  {id: 7, name: 'Nitrogen'},\n  {id: 8, name: 'Oxygen'},\n  {id: 9, name: 'Fluorine'},\n  {id: 10, name: 'Neon'},\n  {id: 11, name: 'Sodium'},\n  {id: 12, name: 'Magnesium'},\n  {id: 13, name: 'Aluminum'},\n  {id: 14, name: 'Silicon'},\n  {id: 15, name: 'Phosphorus'},\n  {id: 16, name: 'Sulfur'},\n  {id: 17, name: 'Chlorine'},\n  {id: 18, name: 'Argon'},\n  {id: 19, name: 'Potassium'},\n  {id: 20, name: 'Calcium'},\n];\n\n/**\n * Data source for the Table view. This class should\n * encapsulate all logic for fetching and manipulating the displayed data\n * (including sorting, pagination, and filtering).\n */\nexport class TableDataSource extends DataSource<TableItem> {\n  data: TableItem[] = EXAMPLE_DATA;\n  paginator: MatPaginator | undefined;\n  sort: MatSort | undefined;\n\n  constructor() {\n    super();\n  }\n\n  /**\n   * Connect this data source to the table. The table will only update when\n   * the returned stream emits new items.\n   * @returns A stream of the items to be rendered.\n   */\n  connect(): Observable<TableItem[]> {\n    if (this.paginator && this.sort) {\n      // Combine everything that affects the rendered data into one update\n      // stream for the data-table to consume.\n      return merge(observableOf(this.data), this.paginator.page, this.sort.sortChange)\n        .pipe(map(() => {\n          return this.getPagedData(this.getSortedData([...this.data ]));\n        }));\n    } else {\n      throw Error('Please set the paginator and sort on the data source before connecting.');\n    }\n  }\n\n  /**\n   *  Called when the table is being destroyed. Use this function, to clean up\n   * any open connections or free any held resources that were set up during connect.\n   */\n  disconnect(): void {}\n\n  /**\n   * Paginate the data (client-side). If you're using server-side pagination,\n   * this would be replaced by requesting the appropriate data from the server.\n   */\n  private getPagedData(data: TableItem[]): TableItem[] {\n    if (this.paginator) {\n      const startIndex = this.paginator.pageIndex * this.paginator.pageSize;\n      return data.splice(startIndex, this.paginator.pageSize);\n    } else {\n      return data;\n    }\n  }\n\n  /**\n   * Sort the data (client-side). If you're using server-side sorting,\n   * this would be replaced by requesting the appropriate data from the server.\n   */\n  private getSortedData(data: TableItem[]): TableItem[] {\n    if (!this.sort || !this.sort.active || this.sort.direction === '') {\n      return data;\n    }\n\n    return data.sort((a, b) => {\n      const isAsc = this.sort?.direction === 'asc';\n      switch (this.sort?.active) {\n        case 'name': return compare(a.name, b.name, isAsc);\n        case 'id': return compare(+a.id, +b.id, isAsc);\n        default: return 0;\n      }\n    });\n  }\n}\n\n/** Simple sort comparator for example ID/Name columns (for client-side sorting). */\nfunction compare(a: string | number, b: string | number, isAsc: boolean): number {\n  return (a < b ? -1 : 1) * (isAsc ? 1 : -1);\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 45
            },
            "inputsClass": [],
            "outputsClass": [],
            "properties": [
                {
                    "name": "data",
                    "defaultValue": "EXAMPLE_DATA",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TableItem[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "paginator",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatPaginator | undefined",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "sort",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatSort | undefined",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 45
                }
            ],
            "description": "<p>Data source for the Table view. This class should\nencapsulate all logic for fetching and manipulating the displayed data\n(including sorting, pagination, and filtering).</p>\n",
            "rawdescription": "\n\nData source for the Table view. This class should\nencapsulate all logic for fetching and manipulating the displayed data\n(including sorting, pagination, and filtering).\n",
            "methods": [
                {
                    "name": "connect",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<TableItem[]>",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nConnect this data source to the table. The table will only update when\nthe returned stream emits new items.\n",
                    "description": "<p>Connect this data source to the table. The table will only update when\nthe returned stream emits new items.</p>\n",
                    "jsdoctags": [
                        {
                            "tagName": {
                                "pos": 1570,
                                "end": 1577,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "returns"
                            },
                            "comment": "<p>A stream of the items to be rendered.</p>\n"
                        }
                    ]
                },
                {
                    "name": "disconnect",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 73,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\n Called when the table is being destroyed. Use this function, to clean up\nany open connections or free any held resources that were set up during connect.\n",
                    "description": "<p> Called when the table is being destroyed. Use this function, to clean up\nany open connections or free any held resources that were set up during connect.</p>\n"
                },
                {
                    "name": "getPagedData",
                    "args": [
                        {
                            "name": "data",
                            "type": "TableItem[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "TableItem[]",
                    "typeParameters": [],
                    "line": 79,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nPaginate the data (client-side). If you're using server-side pagination,\nthis would be replaced by requesting the appropriate data from the server.\n",
                    "description": "<p>Paginate the data (client-side). If you&#39;re using server-side pagination,\nthis would be replaced by requesting the appropriate data from the server.</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "TableItem[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getSortedData",
                    "args": [
                        {
                            "name": "data",
                            "type": "TableItem[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "TableItem[]",
                    "typeParameters": [],
                    "line": 92,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nSort the data (client-side). If you're using server-side sorting,\nthis would be replaced by requesting the appropriate data from the server.\n",
                    "description": "<p>Sort the data (client-side). If you&#39;re using server-side sorting,\nthis would be replaced by requesting the appropriate data from the server.</p>\n",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "TableItem[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "extends": [
                "DataSource"
            ],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [],
    "components": [
        {
            "name": "AddressFormComponent",
            "id": "component-AddressFormComponent-1f3d8bbe432f8a967362c3da36c8ed22291c91afea6c998a49b27b30efd5e6db23dd997ad14ac4a6bc9001db07cac00fda6e956d48122d7e6e0c8d8aba0e3180",
            "file": "src/app/protected/address-form/address-form.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-address-form",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./address-form.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "addressForm",
                    "defaultValue": "this.fb.group({\n    company: null,\n    firstName: [null, Validators.required],\n    lastName: [null, Validators.required],\n    address: [null, Validators.required],\n    address2: null,\n    city: [null, Validators.required],\n    state: [null, Validators.required],\n    postalCode: [null, Validators.compose([\n      Validators.required, Validators.minLength(5), Validators.maxLength(5)])\n    ],\n    shipping: ['free', Validators.required]\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "fb",
                    "defaultValue": "inject(FormBuilder)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "hasUnitNumber",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "states",
                    "defaultValue": "[\n    {name: 'Alabama', abbreviation: 'AL'},\n    {name: 'Alaska', abbreviation: 'AK'},\n    {name: 'American Samoa', abbreviation: 'AS'},\n    {name: 'Arizona', abbreviation: 'AZ'},\n    {name: 'Arkansas', abbreviation: 'AR'},\n    {name: 'California', abbreviation: 'CA'},\n    {name: 'Colorado', abbreviation: 'CO'},\n    {name: 'Connecticut', abbreviation: 'CT'},\n    {name: 'Delaware', abbreviation: 'DE'},\n    {name: 'District Of Columbia', abbreviation: 'DC'},\n    {name: 'Federated States Of Micronesia', abbreviation: 'FM'},\n    {name: 'Florida', abbreviation: 'FL'},\n    {name: 'Georgia', abbreviation: 'GA'},\n    {name: 'Guam', abbreviation: 'GU'},\n    {name: 'Hawaii', abbreviation: 'HI'},\n    {name: 'Idaho', abbreviation: 'ID'},\n    {name: 'Illinois', abbreviation: 'IL'},\n    {name: 'Indiana', abbreviation: 'IN'},\n    {name: 'Iowa', abbreviation: 'IA'},\n    {name: 'Kansas', abbreviation: 'KS'},\n    {name: 'Kentucky', abbreviation: 'KY'},\n    {name: 'Louisiana', abbreviation: 'LA'},\n    {name: 'Maine', abbreviation: 'ME'},\n    {name: 'Marshall Islands', abbreviation: 'MH'},\n    {name: 'Maryland', abbreviation: 'MD'},\n    {name: 'Massachusetts', abbreviation: 'MA'},\n    {name: 'Michigan', abbreviation: 'MI'},\n    {name: 'Minnesota', abbreviation: 'MN'},\n    {name: 'Mississippi', abbreviation: 'MS'},\n    {name: 'Missouri', abbreviation: 'MO'},\n    {name: 'Montana', abbreviation: 'MT'},\n    {name: 'Nebraska', abbreviation: 'NE'},\n    {name: 'Nevada', abbreviation: 'NV'},\n    {name: 'New Hampshire', abbreviation: 'NH'},\n    {name: 'New Jersey', abbreviation: 'NJ'},\n    {name: 'New Mexico', abbreviation: 'NM'},\n    {name: 'New York', abbreviation: 'NY'},\n    {name: 'North Carolina', abbreviation: 'NC'},\n    {name: 'North Dakota', abbreviation: 'ND'},\n    {name: 'Northern Mariana Islands', abbreviation: 'MP'},\n    {name: 'Ohio', abbreviation: 'OH'},\n    {name: 'Oklahoma', abbreviation: 'OK'},\n    {name: 'Oregon', abbreviation: 'OR'},\n    {name: 'Palau', abbreviation: 'PW'},\n    {name: 'Pennsylvania', abbreviation: 'PA'},\n    {name: 'Puerto Rico', abbreviation: 'PR'},\n    {name: 'Rhode Island', abbreviation: 'RI'},\n    {name: 'South Carolina', abbreviation: 'SC'},\n    {name: 'South Dakota', abbreviation: 'SD'},\n    {name: 'Tennessee', abbreviation: 'TN'},\n    {name: 'Texas', abbreviation: 'TX'},\n    {name: 'Utah', abbreviation: 'UT'},\n    {name: 'Vermont', abbreviation: 'VT'},\n    {name: 'Virgin Islands', abbreviation: 'VI'},\n    {name: 'Virginia', abbreviation: 'VA'},\n    {name: 'Washington', abbreviation: 'WA'},\n    {name: 'West Virginia', abbreviation: 'WV'},\n    {name: 'Wisconsin', abbreviation: 'WI'},\n    {name: 'Wyoming', abbreviation: 'WY'}\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 43
                }
            ],
            "methodsClass": [
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 105,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "MatInputModule",
                    "type": "module"
                },
                {
                    "name": "MatButtonModule",
                    "type": "module"
                },
                {
                    "name": "MatSelectModule",
                    "type": "module"
                },
                {
                    "name": "MatRadioModule",
                    "type": "module"
                },
                {
                    "name": "MatCardModule",
                    "type": "module"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, inject } from '@angular/core';\n\nimport { ReactiveFormsModule, FormBuilder, Validators } from '@angular/forms';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatCardModule } from '@angular/material/card';\n\n\n@Component({\n  selector: 'app-address-form',\n  templateUrl: './address-form.component.html',\n  styleUrl: './address-form.component.scss',\n  standalone: true,\n  imports: [\n    MatInputModule,\n    MatButtonModule,\n    MatSelectModule,\n    MatRadioModule,\n    MatCardModule,\n    ReactiveFormsModule\n  ]\n})\nexport class AddressFormComponent {\n  private fb = inject(FormBuilder);\n  addressForm = this.fb.group({\n    company: null,\n    firstName: [null, Validators.required],\n    lastName: [null, Validators.required],\n    address: [null, Validators.required],\n    address2: null,\n    city: [null, Validators.required],\n    state: [null, Validators.required],\n    postalCode: [null, Validators.compose([\n      Validators.required, Validators.minLength(5), Validators.maxLength(5)])\n    ],\n    shipping: ['free', Validators.required]\n  });\n\n  hasUnitNumber = false;\n\n  states = [\n    {name: 'Alabama', abbreviation: 'AL'},\n    {name: 'Alaska', abbreviation: 'AK'},\n    {name: 'American Samoa', abbreviation: 'AS'},\n    {name: 'Arizona', abbreviation: 'AZ'},\n    {name: 'Arkansas', abbreviation: 'AR'},\n    {name: 'California', abbreviation: 'CA'},\n    {name: 'Colorado', abbreviation: 'CO'},\n    {name: 'Connecticut', abbreviation: 'CT'},\n    {name: 'Delaware', abbreviation: 'DE'},\n    {name: 'District Of Columbia', abbreviation: 'DC'},\n    {name: 'Federated States Of Micronesia', abbreviation: 'FM'},\n    {name: 'Florida', abbreviation: 'FL'},\n    {name: 'Georgia', abbreviation: 'GA'},\n    {name: 'Guam', abbreviation: 'GU'},\n    {name: 'Hawaii', abbreviation: 'HI'},\n    {name: 'Idaho', abbreviation: 'ID'},\n    {name: 'Illinois', abbreviation: 'IL'},\n    {name: 'Indiana', abbreviation: 'IN'},\n    {name: 'Iowa', abbreviation: 'IA'},\n    {name: 'Kansas', abbreviation: 'KS'},\n    {name: 'Kentucky', abbreviation: 'KY'},\n    {name: 'Louisiana', abbreviation: 'LA'},\n    {name: 'Maine', abbreviation: 'ME'},\n    {name: 'Marshall Islands', abbreviation: 'MH'},\n    {name: 'Maryland', abbreviation: 'MD'},\n    {name: 'Massachusetts', abbreviation: 'MA'},\n    {name: 'Michigan', abbreviation: 'MI'},\n    {name: 'Minnesota', abbreviation: 'MN'},\n    {name: 'Mississippi', abbreviation: 'MS'},\n    {name: 'Missouri', abbreviation: 'MO'},\n    {name: 'Montana', abbreviation: 'MT'},\n    {name: 'Nebraska', abbreviation: 'NE'},\n    {name: 'Nevada', abbreviation: 'NV'},\n    {name: 'New Hampshire', abbreviation: 'NH'},\n    {name: 'New Jersey', abbreviation: 'NJ'},\n    {name: 'New Mexico', abbreviation: 'NM'},\n    {name: 'New York', abbreviation: 'NY'},\n    {name: 'North Carolina', abbreviation: 'NC'},\n    {name: 'North Dakota', abbreviation: 'ND'},\n    {name: 'Northern Mariana Islands', abbreviation: 'MP'},\n    {name: 'Ohio', abbreviation: 'OH'},\n    {name: 'Oklahoma', abbreviation: 'OK'},\n    {name: 'Oregon', abbreviation: 'OR'},\n    {name: 'Palau', abbreviation: 'PW'},\n    {name: 'Pennsylvania', abbreviation: 'PA'},\n    {name: 'Puerto Rico', abbreviation: 'PR'},\n    {name: 'Rhode Island', abbreviation: 'RI'},\n    {name: 'South Carolina', abbreviation: 'SC'},\n    {name: 'South Dakota', abbreviation: 'SD'},\n    {name: 'Tennessee', abbreviation: 'TN'},\n    {name: 'Texas', abbreviation: 'TX'},\n    {name: 'Utah', abbreviation: 'UT'},\n    {name: 'Vermont', abbreviation: 'VT'},\n    {name: 'Virgin Islands', abbreviation: 'VI'},\n    {name: 'Virginia', abbreviation: 'VA'},\n    {name: 'Washington', abbreviation: 'WA'},\n    {name: 'West Virginia', abbreviation: 'WV'},\n    {name: 'Wisconsin', abbreviation: 'WI'},\n    {name: 'Wyoming', abbreviation: 'WY'}\n  ];\n\n  onSubmit(): void {\n    alert('Thanks!');\n  }\n}\n",
            "styleUrl": "./address-form.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<form [formGroup]=\"addressForm\" novalidate (ngSubmit)=\"onSubmit()\">\n  <mat-card class=\"shipping-card\">\n    <mat-card-header>\n      <mat-card-title>Shipping Information</mat-card-title>\n    </mat-card-header>\n    <mat-card-content>\n      <div class=\"row\">\n        <div class=\"col\">\n          <mat-form-field class=\"full-width\">\n            <input matInput placeholder=\"Company\" formControlName=\"company\">\n          </mat-form-field>\n        </div>\n      </div>\n      <div class=\"row\">\n        <div class=\"col\">\n          <mat-form-field class=\"full-width\">\n            <input matInput placeholder=\"First name\" formControlName=\"firstName\">\n            @if (addressForm.controls['firstName'].hasError('required')) {\n              <mat-error>First name is <strong>required</strong></mat-error>\n            }\n          </mat-form-field>\n        </div>\n        <div class=\"col\">\n          <mat-form-field class=\"full-width\">\n            <input matInput placeholder=\"Last name\" formControlName=\"lastName\">\n            @if (addressForm.controls['lastName'].hasError('required')) {\n              <mat-error>Last name is <strong>required</strong></mat-error>\n            }\n          </mat-form-field>\n        </div>\n      </div>\n      <div class=\"row\">\n        <div class=\"col\">\n          <mat-form-field class=\"full-width\">\n            <textarea matInput placeholder=\"Address\" formControlName=\"address\"></textarea>\n            @if (addressForm.controls['address'].hasError('required')) {\n              <mat-error>Address is <strong>required</strong></mat-error>\n            }\n          </mat-form-field>\n        </div>\n      </div>\n      <div class=\"row\">\n        <div class=\"col\">\n          @if (hasUnitNumber) {\n            <mat-form-field class=\"full-width\">\n              <textarea matInput placeholder=\"Address 2\" formControlName=\"address2\"></textarea>\n            </mat-form-field>\n          } @else {\n            <button mat-button type=\"button\" (click)=\"hasUnitNumber = !hasUnitNumber\">\n              + Add C/O, Apt, Suite, Unit\n            </button>\n          }\n        </div>\n      </div>\n      <div class=\"row\">\n        <div class=\"col\">\n          <mat-form-field class=\"full-width\">\n            <input matInput placeholder=\"City\" formControlName=\"city\">\n            @if (addressForm.controls['city'].hasError('required')) {\n              <mat-error>City is <strong>required</strong></mat-error>\n            }\n          </mat-form-field>\n        </div>\n        <div class=\"col\">\n          <mat-form-field class=\"full-width\">\n            <mat-select placeholder=\"State\" formControlName=\"state\">\n              @for (state of states; track state) {\n                <mat-option [value]=\"state.abbreviation\">{{ state.name }}</mat-option>\n              }\n            </mat-select>\n            @if (addressForm.controls['state'].hasError('required')) {\n              <mat-error>State is <strong>required</strong></mat-error>\n            }\n          </mat-form-field>\n        </div>\n      </div>\n      <div class=\"row\">\n        <div class=\"col\">\n          <mat-form-field class=\"full-width\">\n            <input matInput #postalCode maxlength=\"5\" placeholder=\"Postal Code\" type=\"number\" formControlName=\"postalCode\">\n            <mat-hint align=\"end\">{{postalCode.value.length}} / 5</mat-hint>\n          </mat-form-field>\n        </div>\n      </div>\n      <div class=\"row\">\n        <div class=\"col\">\n          <mat-radio-group formControlName=\"shipping\">\n            <mat-radio-button value=\"free\">Free Shipping</mat-radio-button>\n            <mat-radio-button value=\"priority\">Priority Shipping</mat-radio-button>\n            <mat-radio-button value=\"nextday\">Next Day Shipping</mat-radio-button>\n          </mat-radio-group>\n        </div>\n      </div>\n    </mat-card-content>\n    <mat-card-actions>\n      <button mat-raised-button color=\"primary\" type=\"submit\">Submit</button>\n    </mat-card-actions>\n  </mat-card>\n</form>\n"
        },
        {
            "name": "AppComponent",
            "id": "component-AppComponent-56e9ec31b72bd2f22e1f30e5c007e8e715f20e8c1229a1c826d4f624cff319e7ac708d82373d630099e8ad6aa9360f8f79a2d1f7370e52db242aadbf8617fc14",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "RouterOutlet"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component} from '@angular/core'\nimport {RouterOutlet} from '@angular/router'\n\n@Component({\n  selector: 'app-root',\n  standalone: true,\n  imports: [RouterOutlet],\n  templateUrl: './app.component.html',\n  styleUrl: './app.component.scss'\n})\nexport class AppComponent {\n}\n",
            "styleUrl": "./app.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<router-outlet/>\n"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-d7bf0323e6da130e2609e2af0117b4a8d7cd874132206af50bf43dfc37044485fe50f2867ea76525730dd195b9b95a43802a12dadc6ad5cd7bf2faa07f19f0da",
            "file": "src/stories/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-button",
            "styleUrls": [
                "./button.css"
            ],
            "styles": [],
            "template": " <button  type=\"button\"\n  (click)=\"onClick.emit($event)\"\n  [ngClass]=\"classes\"\n  [ngStyle]=\"{ 'background-color': backgroundColor }\"\n>\n  {{ label }}\n</button>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nWhat background color to use",
                    "description": "<p>What background color to use</p>\n",
                    "line": 25,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "'Button'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 760,
                            "end": 773,
                            "kind": 327,
                            "id": 0,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "tagName": {
                                "pos": 761,
                                "end": 769,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "required"
                            },
                            "comment": ""
                        }
                    ],
                    "rawdescription": "\n\nButton contents\n\n",
                    "description": "<p>Button contents</p>\n",
                    "line": 37,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "primary",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nIs this the principal call to action on the page?",
                    "description": "<p>Is this the principal call to action on the page?</p>\n",
                    "line": 21,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nHow large should the button be?",
                    "description": "<p>How large should the button be?</p>\n",
                    "line": 29,
                    "type": "\"small\" | \"medium\" | \"large\"",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nOptional click handler",
                    "description": "<p>Optional click handler</p>\n",
                    "line": 41,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-button',\n  standalone: true,\n  imports: [CommonModule],\n  template: ` <button\n  type=\"button\"\n  (click)=\"onClick.emit($event)\"\n  [ngClass]=\"classes\"\n  [ngStyle]=\"{ 'background-color': backgroundColor }\"\n>\n  {{ label }}\n</button>`,\n  styleUrls: ['./button.css'],\n})\nexport class ButtonComponent {\n  /** Is this the principal call to action on the page? */\n  @Input()\n  primary = false;\n\n  /** What background color to use */\n  @Input()\n  backgroundColor?: string;\n\n  /** How large should the button be? */\n  @Input()\n  size: 'small' | 'medium' | 'large' = 'medium';\n\n  /**\n   * Button contents\n   *\n   * @required\n   */\n  @Input()\n  label = 'Button';\n\n  /** Optional click handler */\n  @Output()\n  onClick = new EventEmitter<Event>();\n\n  public get classes(): string[] {\n    const mode = this.primary ? 'storybook-button--primary' : 'storybook-button--secondary';\n\n    return ['storybook-button', `storybook-button--${this.size}`, mode];\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-button {\n  display: inline-block;\n  cursor: pointer;\n  border: 0;\n  border-radius: 3em;\n  font-weight: 700;\n  line-height: 1;\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n}\n.storybook-button--primary {\n  background-color: #555ab9;\n  color: white;\n}\n.storybook-button--secondary {\n  box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset;\n  background-color: transparent;\n  color: #333;\n}\n.storybook-button--small {\n  padding: 10px 16px;\n  font-size: 12px;\n}\n.storybook-button--medium {\n  padding: 11px 20px;\n  font-size: 14px;\n}\n.storybook-button--large {\n  padding: 12px 24px;\n  font-size: 16px;\n}\n",
                    "styleUrl": "./button.css"
                }
            ],
            "stylesData": "",
            "extends": [],
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 43
                    }
                }
            }
        },
        {
            "name": "DashboardComponent",
            "id": "component-DashboardComponent-7b4c237750660f4f147edb2f5dbfb70d9c9a28871b6598cccc87e202d06898682e261018ac0f511c801f476702163a5002097def65801579bde40ef6acbd994a",
            "file": "src/app/protected/dashboard/dashboard.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-dashboard",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./dashboard.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "breakpointObserver",
                    "defaultValue": "inject(BreakpointObserver)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "cards",
                    "defaultValue": "this.breakpointObserver.observe(Breakpoints.Handset).pipe(\n    map(({ matches }) => {\n      if (matches) {\n        return [\n          { title: 'Card 1', cols: 1, rows: 1 },\n          { title: 'Card 2', cols: 1, rows: 1 },\n          { title: 'Card 3', cols: 1, rows: 1 },\n          { title: 'Card 4', cols: 1, rows: 1 }\n        ];\n      }\n\n      return [\n        { title: 'Card 1', cols: 2, rows: 1 },\n        { title: 'Card 2', cols: 1, rows: 1 },\n        { title: 'Card 3', cols: 1, rows: 2 },\n        { title: 'Card 4', cols: 1, rows: 1 }\n      ];\n    })\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Based on the screen size, switch from standard to one column per row</p>\n",
                    "line": 29,
                    "rawdescription": "\nBased on the screen size, switch from standard to one column per row"
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "AsyncPipe",
                    "type": "pipe"
                },
                {
                    "name": "MatGridListModule",
                    "type": "module"
                },
                {
                    "name": "MatMenuModule",
                    "type": "module"
                },
                {
                    "name": "MatIconModule",
                    "type": "module"
                },
                {
                    "name": "MatButtonModule",
                    "type": "module"
                },
                {
                    "name": "MatCardModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, inject } from '@angular/core';\nimport { Breakpoints, BreakpointObserver } from '@angular/cdk/layout';\nimport { map } from 'rxjs/operators';\nimport { AsyncPipe } from '@angular/common';\nimport { MatGridListModule } from '@angular/material/grid-list';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCardModule } from '@angular/material/card';\n\n@Component({\n  selector: 'app-dashboard',\n  templateUrl: './dashboard.component.html',\n  styleUrl: './dashboard.component.scss',\n  standalone: true,\n  imports: [\n    AsyncPipe,\n    MatGridListModule,\n    MatMenuModule,\n    MatIconModule,\n    MatButtonModule,\n    MatCardModule\n  ]\n})\nexport class DashboardComponent {\n  private breakpointObserver = inject(BreakpointObserver);\n\n  /** Based on the screen size, switch from standard to one column per row */\n  cards = this.breakpointObserver.observe(Breakpoints.Handset).pipe(\n    map(({ matches }) => {\n      if (matches) {\n        return [\n          { title: 'Card 1', cols: 1, rows: 1 },\n          { title: 'Card 2', cols: 1, rows: 1 },\n          { title: 'Card 3', cols: 1, rows: 1 },\n          { title: 'Card 4', cols: 1, rows: 1 }\n        ];\n      }\n\n      return [\n        { title: 'Card 1', cols: 2, rows: 1 },\n        { title: 'Card 2', cols: 1, rows: 1 },\n        { title: 'Card 3', cols: 1, rows: 2 },\n        { title: 'Card 4', cols: 1, rows: 1 }\n      ];\n    })\n  );\n}\n",
            "styleUrl": "./dashboard.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"grid-container\">\n  <h1 class=\"mat-h1\">Dashboard</h1>\n  <mat-grid-list cols=\"2\" rowHeight=\"350px\">\n    @for (card of cards | async; track card) {\n      <mat-grid-tile [colspan]=\"card.cols\" [rowspan]=\"card.rows\">\n        <mat-card class=\"dashboard-card\">\n          <mat-card-header>\n            <mat-card-title>\n              {{card.title}}\n              <button mat-icon-button class=\"more-button\" [matMenuTriggerFor]=\"menu\" aria-label=\"Toggle menu\">\n                <mat-icon>more_vert</mat-icon>\n              </button>\n              <mat-menu #menu=\"matMenu\" xPosition=\"before\">\n                <button mat-menu-item>Expand</button>\n                <button mat-menu-item>Remove</button>\n              </mat-menu>\n            </mat-card-title>\n          </mat-card-header>\n          <mat-card-content class=\"dashboard-card-content\">\n            <div>Card Content Here</div>\n          </mat-card-content>\n        </mat-card>\n      </mat-grid-tile>\n    }\n  </mat-grid-list>\n</div>\n"
        },
        {
            "name": "DragDropComponent",
            "id": "component-DragDropComponent-284cccb8e93dda36d97b84887af4e4e9117121ca6f0418cc07d7e848885a6b7f5f4b38c97c17baf1432e2b7577bcfcf28667ac3f5d1b52b30ddd5900e58db9c7",
            "file": "src/app/protected/drag-drop/drag-drop.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-drag-drop",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./drag-drop.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "done",
                    "defaultValue": "[\n    'Get up',\n    'Brush teeth',\n    'Take a shower',\n    'Check e-mail',\n    'Walk dog'\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "todo",
                    "defaultValue": "[\n    'Get to work',\n    'Pick up groceries',\n    'Go home',\n    'Fall asleep'\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "methodsClass": [
                {
                    "name": "drop",
                    "args": [
                        {
                            "name": "event",
                            "type": "CdkDragDrop<string[]>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "CdkDragDrop<string[]>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CdkDrag"
                },
                {
                    "name": "CdkDropList"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { CdkDrag, CdkDropList, CdkDragDrop, moveItemInArray, transferArrayItem } from '@angular/cdk/drag-drop';\n\n@Component({\n  selector: 'app-drag-drop',\n  templateUrl: './drag-drop.component.html',\n  styleUrl: './drag-drop.component.scss',\n  standalone: true,\n  imports: [CdkDrag, CdkDropList]\n})\nexport class DragDropComponent {\n  todo = [\n    'Get to work',\n    'Pick up groceries',\n    'Go home',\n    'Fall asleep'\n  ];\n\n  done = [\n    'Get up',\n    'Brush teeth',\n    'Take a shower',\n    'Check e-mail',\n    'Walk dog'\n  ];\n\n  drop(event: CdkDragDrop<string[]>): void {\n    if (event.previousContainer === event.container) {\n      moveItemInArray(event.container.data, event.previousIndex, event.currentIndex);\n    } else {\n      transferArrayItem(event.previousContainer.data,\n          event.container.data,\n          event.previousIndex,\n          event.currentIndex);\n    }\n  }\n}\n",
            "styleUrl": "./drag-drop.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"container\">\n  <h2>To do</h2>\n\n  <div cdkDropList #todoList=\"cdkDropList\" [cdkDropListData]=\"todo\"\n      [cdkDropListConnectedTo]=\"doneList\" class=\"list\" (cdkDropListDropped)=\"drop($event)\">\n    @for (item of todo; track item) {\n      <div class=\"list-item\" cdkDrag>{{item}}</div>\n    }\n  </div>\n</div>\n\n<div class=\"container\">\n  <h2>Done</h2>\n\n  <div cdkDropList #doneList=\"cdkDropList\" [cdkDropListData]=\"done\"\n      [cdkDropListConnectedTo]=\"todoList\" class=\"list\" (cdkDropListDropped)=\"drop($event)\">\n    @for (item of done; track item) {\n      <div class=\"list-item\" cdkDrag>{{item}}</div>\n    }\n  </div>\n</div>\n"
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-48b9abe37706bc42f20cfa97ed9f943678344ea7d254c0c82183c657750c2191b43486fe730c778627b2ea6aa0e2f33a7abcf3ce08b68ad18b062ad99ea97acb",
            "file": "src/stories/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-header",
            "styleUrls": [
                "./header.css"
            ],
            "styles": [],
            "template": "<header>  <div class=\"storybook-header\">\n    <div>\n      <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n        <g fill=\"none\" fillRule=\"evenodd\">\n          <path\n            d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n            fill=\"#FFF\"\n          />\n          <path\n            d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n            fill=\"#555AB9\"\n          />\n          <path d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\" fill=\"#91BAF8\" />\n        </g>\n      </svg>\n      <h1>Acme</h1>\n    </div>\n    <div>\n      <div *ngIf=\"user\">\n        <span class=\"welcome\">\n          Welcome, <b>{{ user.name }}</b\n          >!\n        </span>\n        <storybook-button\n          *ngIf=\"user\"\n          size=\"small\"\n          (onClick)=\"onLogout.emit($event)\"\n          label=\"Log out\"\n        ></storybook-button>\n      </div>\n      <div *ngIf=\"!user\">\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          class=\"margin-left\"\n          (onClick)=\"onLogin.emit($event)\"\n          label=\"Log in\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          [primary]=\"true\"\n          class=\"margin-left\"\n          (onClick)=\"onCreateAccount.emit($event)\"\n          label=\"Sign up\"\n        ></storybook-button>\n      </div>\n    </div>\n  </div>\n</header>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 66,
                    "type": "User | null",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 75,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 69,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 72,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ButtonComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { ButtonComponent } from './button.component';\nimport type { User } from './user';\n\n@Component({\n  selector: 'storybook-header',\n  standalone: true,\n  imports: [CommonModule, ButtonComponent],\n  template: `<header>\n  <div class=\"storybook-header\">\n    <div>\n      <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n        <g fill=\"none\" fillRule=\"evenodd\">\n          <path\n            d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n            fill=\"#FFF\"\n          />\n          <path\n            d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n            fill=\"#555AB9\"\n          />\n          <path d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\" fill=\"#91BAF8\" />\n        </g>\n      </svg>\n      <h1>Acme</h1>\n    </div>\n    <div>\n      <div *ngIf=\"user\">\n        <span class=\"welcome\">\n          Welcome, <b>{{ user.name }}</b\n          >!\n        </span>\n        <storybook-button\n          *ngIf=\"user\"\n          size=\"small\"\n          (onClick)=\"onLogout.emit($event)\"\n          label=\"Log out\"\n        ></storybook-button>\n      </div>\n      <div *ngIf=\"!user\">\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          class=\"margin-left\"\n          (onClick)=\"onLogin.emit($event)\"\n          label=\"Log in\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          [primary]=\"true\"\n          class=\"margin-left\"\n          (onClick)=\"onCreateAccount.emit($event)\"\n          label=\"Sign up\"\n        ></storybook-button>\n      </div>\n    </div>\n  </div>\n</header>`,\n  styleUrls: ['./header.css'],\n})\nexport class HeaderComponent {\n  @Input()\n  user: User | null = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\n  padding: 15px 20px;\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n}\n\n.storybook-header svg {\n  display: inline-block;\n  vertical-align: top;\n}\n\n.storybook-header h1 {\n  display: inline-block;\n  vertical-align: top;\n  margin: 6px 0 6px 10px;\n  font-weight: 700;\n  font-size: 20px;\n  line-height: 1;\n}\n\n.storybook-header button + button {\n  margin-left: 10px;\n}\n\n.storybook-header .welcome {\n  margin-right: 10px;\n  color: #333;\n  font-size: 14px;\n}\n",
                    "styleUrl": "./header.css"
                }
            ],
            "stylesData": "",
            "extends": []
        },
        {
            "name": "LayoutComponent",
            "id": "component-LayoutComponent-a471d44a69da6a4d27cac5bb25c82fce888db2301321a63f5d5d41ceac4f81d7a22b161e684e63d33e65ecf9f7b3127d440ad09844403da8eaaf3250b8466a84",
            "file": "src/app/layout/layout/layout.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-layout",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./layout.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "actualRoute",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "breakpointObserver",
                    "defaultValue": "inject(BreakpointObserver)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "cdr",
                    "defaultValue": "inject(ChangeDetectorRef)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ChangeDetectorRef",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 42,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "isHandset$",
                    "defaultValue": "this.breakpointObserver.observe(Breakpoints.Handset)\n        .pipe(\n            map(result => result.matches),\n            shareReplay()\n        )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<boolean>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 54
                },
                {
                    "name": "route",
                    "defaultValue": "inject(ActivatedRoute)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ActivatedRoute",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 43,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "router",
                    "defaultValue": "inject(Router)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Router",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 41,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "routes",
                    "defaultValue": "routes[1]?.children?.filter(r => r.path && r.path !== '**')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Routes",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 44
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "RouterOutlet"
                },
                {
                    "name": "MatToolbarModule",
                    "type": "module"
                },
                {
                    "name": "MatButtonModule",
                    "type": "module"
                },
                {
                    "name": "MatSidenavModule",
                    "type": "module"
                },
                {
                    "name": "MatListModule",
                    "type": "module"
                },
                {
                    "name": "MatIconModule",
                    "type": "module"
                },
                {
                    "name": "AsyncPipe",
                    "type": "pipe"
                },
                {
                    "name": "RouterLink"
                },
                {
                    "name": "RouterLinkActive"
                },
                {
                    "name": "RouterOutlet"
                },
                {
                    "name": "NgOptimizedImage"
                },
                {
                    "name": "MatMenuTrigger"
                },
                {
                    "name": "MatMenu"
                },
                {
                    "name": "MatMenuItem"
                },
                {
                    "name": "ThemeToggleComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {ChangeDetectorRef, Component, inject, OnInit} from '@angular/core'\nimport {ActivatedRoute, Router, RouterLink, RouterLinkActive, RouterOutlet, Routes} from '@angular/router'\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout'\nimport {Observable, shareReplay} from 'rxjs'\nimport {map} from 'rxjs/operators'\nimport {routes} from '../../app.routes'\nimport {AsyncPipe, NgOptimizedImage} from '@angular/common'\nimport {MatToolbarModule} from '@angular/material/toolbar'\nimport {MatButtonModule} from '@angular/material/button'\nimport {MatSidenavModule} from '@angular/material/sidenav'\nimport {MatListModule} from '@angular/material/list'\nimport {MatIconModule} from '@angular/material/icon'\nimport {MatMenu, MatMenuItem, MatMenuTrigger} from '@angular/material/menu'\nimport {ThemeToggleComponent} from '../../shared/components/theme-toggle/theme-toggle.component'\n\n@Component({\n    selector: 'app-layout',\n    standalone: true,\n    imports: [\n        RouterOutlet,\n        MatToolbarModule,\n        MatButtonModule,\n        MatSidenavModule,\n        MatListModule,\n        MatIconModule,\n        AsyncPipe,\n        RouterLink,\n        RouterLinkActive,\n        RouterOutlet,\n        NgOptimizedImage,\n        MatMenuTrigger,\n        MatMenu,\n        MatMenuItem,\n        ThemeToggleComponent,\n    ],\n    templateUrl: './layout.component.html',\n    styleUrl: './layout.component.scss'\n})\nexport class LayoutComponent implements OnInit {\n    private breakpointObserver = inject(BreakpointObserver)\n    private router: Router = inject(Router)\n    private cdr: ChangeDetectorRef = inject(ChangeDetectorRef)\n    private route: ActivatedRoute = inject(ActivatedRoute)\n    routes: Routes = routes[1]?.children?.filter(r => r.path && r.path !== '**')\n    actualRoute: {title: string, icon: string}\n\n    ngOnInit() {\n        this.router.events.subscribe((event) => {\n            const {data} = this.routes.find(r => r.path === this.route.snapshot.firstChild?.routeConfig?.path) as any\n            this.actualRoute = {title: data.title, icon: data.icon}\n        })\n    }\n\n    isHandset$: Observable<boolean> = this.breakpointObserver.observe(Breakpoints.Handset)\n        .pipe(\n            map(result => result.matches),\n            shareReplay()\n        )\n}\n",
            "styleUrl": "./layout.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<mat-drawer-container>\n    <mat-drawer #drawer class=\"sidenav\"\n                [attr.role]=\"(isHandset$ | async) ? 'dialog' : 'navigation'\"\n                [mode]=\"(isHandset$ | async) ? 'over' : 'side'\"\n                [opened]=\"(isHandset$ | async) === false\">\n        <mat-toolbar>\n            <img ngSrc=\"/logo.svg\" priority width=\"150\" height=\"37\">\n        </mat-toolbar>\n        <mat-nav-list>\n            @for (item of routes; track $index) {\n                <a\n                    mat-list-item\n                    [routerLink]=\"item.path\"\n                    #link=\"routerLinkActive\"\n                    routerLinkActive\n                    [activated]=\"link.isActive\"\n                >\n                    <mat-icon matListItemIcon class=\"material-symbols-outlined\">{{item.data['icon']}}</mat-icon>\n                    <span>{{item.title}}</span>\n                </a>\n            }\n        </mat-nav-list>\n    </mat-drawer>\n\n    <mat-drawer-content #drawerContent>\n        <mat-toolbar color=\"primary\" class=\"d-flex align-items-center justify-content-between w-100\">\n            @if (isHandset$ | async) {\n                <button\n                    type=\"button\"\n                    aria-label=\"Toggle sidenav\"\n                    mat-icon-button\n                    (click)=\"drawer.toggle()\">\n                    <mat-icon aria-label=\"Side nav toggle icon\">menu</mat-icon>\n                </button>\n            }\n            <h1 class=\"d-flex align-items-center\">\n                <mat-icon class=\"material-symbols-outlined me-1\">{{actualRoute?.icon}}</mat-icon>\n                <span>{{actualRoute?.title}}</span>\n            </h1>\n            <div class=\"d-flex align-items-center gap-3\">\n                <app-theme-toggle></app-theme-toggle>\n                <button mat-stroked-button [matMenuTriggerFor]=\"menu\">\n                    <mat-icon class=\"material-symbols-outlined\">account_circle</mat-icon>\n                    admin&#64;admin.com\n                </button>\n                <mat-menu #menu=\"matMenu\">\n                    <button mat-menu-item>\n                        <mat-icon class=\"material-symbols-outlined\">person</mat-icon>\n                        <span>My Profile</span>\n                    </button>\n                    <button mat-menu-item>\n                        <mat-icon class=\"material-symbols-outlined\">logout</mat-icon>\n                        <span>Sign Out</span>\n                    </button>\n                </mat-menu>\n            </div>\n        </mat-toolbar>\n        <div class=\"sidenav-scroll-wrapper\">\n            <div class=\"sidenav-content\">\n                <router-outlet></router-outlet>\n            </div>\n        </div>\n    </mat-drawer-content>\n</mat-drawer-container>\n"
        },
        {
            "name": "PageComponent",
            "id": "component-PageComponent-21dd6eb370b4983b5c21c84d40e6f54d266a9d9af9889e6e76b35c43058bd53b3e451bad089d5adf4bea46647ba10265a2fa8cb15630398e75636307d4817fc6",
            "file": "src/stories/page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-page",
            "styleUrls": [
                "./page.css"
            ],
            "styles": [],
            "template": "<article>  <storybook-header\n    [user]=\"user\"\n    (onLogout)=\"doLogout()\"\n    (onLogin)=\"doLogin()\"\n    (onCreateAccount)=\"doCreateAccount()\"\n  ></storybook-header>\n  <section class=\"storybook-page\">\n    <h2>Pages in Storybook</h2>\n    <p>\n      We recommend building UIs with a\n      <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n        <strong>component-driven</strong>\n      </a>\n      process starting with atomic components and ending with pages.\n    </p>\n    <p>\n      Render pages with mock data. This makes it easy to build and review page states without\n      needing to navigate to them in your app. Here are some handy patterns for managing page data\n      in Storybook:\n    </p>\n    <ul>\n      <li>\n        Use a higher-level connected component. Storybook helps you compose such data from the\n        \"args\" of child component stories\n      </li>\n      <li>\n        Assemble data in the page component from your services. You can mock these services out\n        using Storybook.\n      </li>\n    </ul>\n    <p>\n      Get a guided tutorial on component-driven development at\n      <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n        Storybook tutorials\n      </a>\n      . Read more in the\n      <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n      .\n    </p>\n    <div class=\"tip-wrapper\">\n      <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n      <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n        <g fill=\"none\" fillRule=\"evenodd\">\n          <path\n            d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n            id=\"a\"\n            fill=\"#999\"\n          />\n        </g>\n      </svg>\n      Viewports addon in the toolbar\n    </div>\n  </section>\n</article>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 69
                }
            ],
            "methodsClass": [
                {
                    "name": "doCreateAccount",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 79,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "doLogin",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "doLogout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "HeaderComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { HeaderComponent } from './header.component';\nimport type { User } from './user';\n\n@Component({\n  selector: 'storybook-page',\n  standalone: true,\n  imports: [CommonModule, HeaderComponent],\n  template: `<article>\n  <storybook-header\n    [user]=\"user\"\n    (onLogout)=\"doLogout()\"\n    (onLogin)=\"doLogin()\"\n    (onCreateAccount)=\"doCreateAccount()\"\n  ></storybook-header>\n  <section class=\"storybook-page\">\n    <h2>Pages in Storybook</h2>\n    <p>\n      We recommend building UIs with a\n      <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n        <strong>component-driven</strong>\n      </a>\n      process starting with atomic components and ending with pages.\n    </p>\n    <p>\n      Render pages with mock data. This makes it easy to build and review page states without\n      needing to navigate to them in your app. Here are some handy patterns for managing page data\n      in Storybook:\n    </p>\n    <ul>\n      <li>\n        Use a higher-level connected component. Storybook helps you compose such data from the\n        \"args\" of child component stories\n      </li>\n      <li>\n        Assemble data in the page component from your services. You can mock these services out\n        using Storybook.\n      </li>\n    </ul>\n    <p>\n      Get a guided tutorial on component-driven development at\n      <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n        Storybook tutorials\n      </a>\n      . Read more in the\n      <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n      .\n    </p>\n    <div class=\"tip-wrapper\">\n      <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n      <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n        <g fill=\"none\" fillRule=\"evenodd\">\n          <path\n            d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n            id=\"a\"\n            fill=\"#999\"\n          />\n        </g>\n      </svg>\n      Viewports addon in the toolbar\n    </div>\n  </section>\n</article>`,\n  styleUrls: ['./page.css'],\n})\nexport class PageComponent {\n  user: User | null = null;\n\n  doLogout() {\n    this.user = null;\n  }\n\n  doLogin() {\n    this.user = { name: 'Jane Doe' };\n  }\n\n  doCreateAccount() {\n    this.user = { name: 'Jane Doe' };\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-page {\n  margin: 0 auto;\n  padding: 48px 20px;\n  max-width: 600px;\n  color: #333;\n  font-size: 14px;\n  line-height: 24px;\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n}\n\n.storybook-page h2 {\n  display: inline-block;\n  vertical-align: top;\n  margin: 0 0 4px;\n  font-weight: 700;\n  font-size: 32px;\n  line-height: 1;\n}\n\n.storybook-page p {\n  margin: 1em 0;\n}\n\n.storybook-page a {\n  color: inherit;\n}\n\n.storybook-page ul {\n  margin: 1em 0;\n  padding-left: 30px;\n}\n\n.storybook-page li {\n  margin-bottom: 8px;\n}\n\n.storybook-page .tip {\n  display: inline-block;\n  vertical-align: top;\n  margin-right: 10px;\n  border-radius: 1em;\n  background: #e7fdd8;\n  padding: 4px 12px;\n  color: #357a14;\n  font-weight: 700;\n  font-size: 11px;\n  line-height: 12px;\n}\n\n.storybook-page .tip-wrapper {\n  margin-top: 40px;\n  margin-bottom: 40px;\n  font-size: 13px;\n  line-height: 20px;\n}\n\n.storybook-page .tip-wrapper svg {\n  display: inline-block;\n  vertical-align: top;\n  margin-top: 3px;\n  margin-right: 4px;\n  width: 12px;\n  height: 12px;\n}\n\n.storybook-page .tip-wrapper svg path {\n  fill: #1ea7fd;\n}\n",
                    "styleUrl": "./page.css"
                }
            ],
            "stylesData": "",
            "extends": []
        },
        {
            "name": "TableComponent",
            "id": "component-TableComponent-59e74916e63d12f6a583c57bfb1fc74c7ad022e7ac76fbb8ca4105429a0087a12211852d13c4382430e740e29cbccc9e24e126769b9842f9ecefd989fb22772d",
            "file": "src/app/protected/table/table.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-table",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./table.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "dataSource",
                    "defaultValue": "new TableDataSource()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "displayedColumns",
                    "defaultValue": "['id', 'name']",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>Columns displayed in the table. Columns IDs can be added, removed, or reordered.</p>\n",
                    "line": 21,
                    "rawdescription": "\nColumns displayed in the table. Columns IDs can be added, removed, or reordered."
                },
                {
                    "name": "paginator",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatPaginator",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "MatPaginator"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "sort",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatSort",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "MatSort"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "table",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatTable<TableItem>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "MatTable"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "MatTableModule",
                    "type": "module"
                },
                {
                    "name": "MatPaginatorModule",
                    "type": "module"
                },
                {
                    "name": "MatSortModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { AfterViewInit, Component, ViewChild } from '@angular/core';\nimport { MatTableModule, MatTable } from '@angular/material/table';\nimport { MatPaginatorModule, MatPaginator } from '@angular/material/paginator';\nimport { MatSortModule, MatSort } from '@angular/material/sort';\nimport { TableDataSource, TableItem } from './table-datasource';\n\n@Component({\n  selector: 'app-table',\n  templateUrl: './table.component.html',\n  styleUrl: './table.component.scss',\n  standalone: true,\n  imports: [MatTableModule, MatPaginatorModule, MatSortModule]\n})\nexport class TableComponent implements AfterViewInit {\n  @ViewChild(MatPaginator) paginator!: MatPaginator;\n  @ViewChild(MatSort) sort!: MatSort;\n  @ViewChild(MatTable) table!: MatTable<TableItem>;\n  dataSource = new TableDataSource();\n\n  /** Columns displayed in the table. Columns IDs can be added, removed, or reordered. */\n  displayedColumns = ['id', 'name'];\n\n  ngAfterViewInit(): void {\n    this.dataSource.sort = this.sort;\n    this.dataSource.paginator = this.paginator;\n    this.table.dataSource = this.dataSource;\n  }\n}\n",
            "styleUrl": "./table.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "implements": [
                "AfterViewInit"
            ],
            "templateData": "<div class=\"mat-elevation-z2\">\n  <table mat-table class=\"full-width-table\" matSort aria-label=\"Elements\">\n    <!-- Id Column -->\n    <ng-container matColumnDef=\"id\">\n      <th mat-header-cell *matHeaderCellDef mat-sort-header>Id</th>\n      <td mat-cell *matCellDef=\"let row\">{{row.id}}</td>\n    </ng-container>\n\n    <!-- Name Column -->\n    <ng-container matColumnDef=\"name\">\n      <th mat-header-cell *matHeaderCellDef mat-sort-header>Name</th>\n      <td mat-cell *matCellDef=\"let row\">{{row.name}}</td>\n    </ng-container>\n\n    <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n    <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\n  </table>\n\n  <mat-paginator #paginator\n      [length]=\"dataSource.data.length\"\n      [pageIndex]=\"0\"\n      [pageSize]=\"10\"\n      [pageSizeOptions]=\"[5, 10, 20]\"\n      aria-label=\"Select page\">\n  </mat-paginator>\n</div>\n"
        },
        {
            "name": "ThemeToggleComponent",
            "id": "component-ThemeToggleComponent-505d1649bb4336c189495dfc0be85effa6a92306048fbafd66563dd74d9a7a803dc29679059eb5ce45c7d3a7d6018ffd7a58c93868ec7073310258a80e7cc23c",
            "file": "src/app/shared/components/theme-toggle/theme-toggle.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-theme-toggle",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./theme-toggle.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "isDarkMode",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                }
            ],
            "methodsClass": [
                {
                    "name": "applyTheme",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "toggleTheme",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "MatIconButton"
                },
                {
                    "name": "MatIcon"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, OnInit} from '@angular/core'\nimport {MatIconButton} from '@angular/material/button'\nimport {MatIcon} from '@angular/material/icon'\n\nexport enum Theme {\n    Dark = 'dark-theme',\n    Light = 'light-theme'\n}\n\n@Component({\n    selector: 'app-theme-toggle',\n    standalone: true,\n    imports: [\n        MatIconButton,\n        MatIcon\n    ],\n    templateUrl: './theme-toggle.component.html',\n    styleUrl: './theme-toggle.component.scss'\n})\nexport class ThemeToggleComponent implements OnInit {\n    isDarkMode = false\n\n    ngOnInit(): void {\n        const storedTheme = localStorage.getItem('theme')\n\n        if (storedTheme) {\n            this.isDarkMode = storedTheme === Theme.Dark\n        } else {\n            this.isDarkMode = !window.matchMedia('(prefers-color-scheme: light)').matches\n        }\n        this.applyTheme()\n    }\n\n    toggleTheme(): void {\n        this.isDarkMode = !this.isDarkMode\n        this.applyTheme()\n    }\n\n    private applyTheme(): void {\n        const themeClass = this.isDarkMode ? Theme.Dark : Theme.Light\n        document.body.classList.remove(Theme.Dark, Theme.Light)\n        document.body.classList.add(themeClass)\n        localStorage.setItem('theme', themeClass)\n    }\n}\n",
            "styleUrl": "./theme-toggle.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<button mat-icon-button (click)=\"toggleTheme()\">\n    <mat-icon class=\"material-symbols-outlined\">{{isDarkMode ? 'light_mode' : 'dark_mode'}}</mat-icon>\n</button>\n"
        },
        {
            "name": "TreeComponent",
            "id": "component-TreeComponent-72980a535049544240a788267809520563e4b029edf9e63ea0dfa73047b584fb689ee24c652a31f6d2218f2a6411ae8ae59d9d4ac3a88bfc5cab972e89fca689",
            "file": "src/app/protected/tree/tree.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-tree",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./tree.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "dataSource",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatTreeFlatDataSource<FileNode | FlatTreeNode>",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>The MatTreeFlatDataSource connects the control and flattener to provide data.</p>\n",
                    "line": 42,
                    "rawdescription": "\nThe MatTreeFlatDataSource connects the control and flattener to provide data."
                },
                {
                    "name": "treeControl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FlatTreeControl<FlatTreeNode>",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>The TreeControl controls the expand/collapse state of tree nodes.</p>\n",
                    "line": 36,
                    "rawdescription": "\nThe TreeControl controls the expand/collapse state of tree nodes."
                },
                {
                    "name": "treeFlattener",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatTreeFlattener<FileNode | FlatTreeNode>",
                    "indexKey": "",
                    "optional": false,
                    "description": "<p>The TreeFlattener is used to generate the flat list of items from hierarchical data.</p>\n",
                    "line": 39,
                    "rawdescription": "\nThe TreeFlattener is used to generate the flat list of items from hierarchical data."
                }
            ],
            "methodsClass": [
                {
                    "name": "getChildren",
                    "args": [
                        {
                            "name": "node",
                            "type": "FileNode",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "[] | null | undefined",
                    "typeParameters": [],
                    "line": 82,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nGet the children for the node.",
                    "description": "<p>Get the children for the node.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "node",
                            "type": "FileNode",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getLevel",
                    "args": [
                        {
                            "name": "node",
                            "type": "FlatTreeNode",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 67,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nGet the level of the node",
                    "description": "<p>Get the level of the node</p>\n",
                    "jsdoctags": [
                        {
                            "name": "node",
                            "type": "FlatTreeNode",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "hasChild",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "node",
                            "type": "FlatTreeNode",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 77,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nGet whether the node has children or not.",
                    "description": "<p>Get whether the node has children or not.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "node",
                            "type": "FlatTreeNode",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isExpandable",
                    "args": [
                        {
                            "name": "node",
                            "type": "FlatTreeNode",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 72,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nGet whether the node is expanded or not.",
                    "description": "<p>Get whether the node is expanded or not.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "node",
                            "type": "FlatTreeNode",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "transformer",
                    "args": [
                        {
                            "name": "node",
                            "type": "FileNode",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "level",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "FlatTreeNode",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nTransform the data to something the tree can read.",
                    "description": "<p>Transform the data to something the tree can read.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "node",
                            "type": "FileNode",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "level",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "MatTreeModule",
                    "type": "module"
                },
                {
                    "name": "MatButtonModule",
                    "type": "module"
                },
                {
                    "name": "MatIconModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { MatTreeModule, MatTreeFlatDataSource, MatTreeFlattener } from '@angular/material/tree';\nimport { FlatTreeControl } from '@angular/cdk/tree';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\nimport { files } from './example-data';\n\n/** File node data with possible child nodes. */\nexport interface FileNode {\n  name: string;\n  type: string;\n  children?: FileNode[];\n}\n\n/**\n * Flattened tree node that has been created from a FileNode through the flattener. Flattened\n * nodes include level index and whether they can be expanded or not.\n */\nexport interface FlatTreeNode {\n  name: string;\n  type: string;\n  level: number;\n  expandable: boolean;\n}\n\n@Component({\n  selector: 'app-tree',\n  templateUrl: './tree.component.html',\n  styleUrl: './tree.component.scss',\n  standalone: true,\n  imports: [MatTreeModule, MatButtonModule, MatIconModule]\n})\nexport class TreeComponent {\n\n  /** The TreeControl controls the expand/collapse state of tree nodes.  */\n  treeControl: FlatTreeControl<FlatTreeNode>;\n\n  /** The TreeFlattener is used to generate the flat list of items from hierarchical data. */\n  treeFlattener: MatTreeFlattener<FileNode, FlatTreeNode>;\n\n  /** The MatTreeFlatDataSource connects the control and flattener to provide data. */\n  dataSource: MatTreeFlatDataSource<FileNode, FlatTreeNode>;\n\n  constructor() {\n    this.treeFlattener = new MatTreeFlattener(\n      this.transformer,\n      this.getLevel,\n      this.isExpandable,\n      this.getChildren);\n\n    this.treeControl = new FlatTreeControl(this.getLevel, this.isExpandable);\n    this.dataSource = new MatTreeFlatDataSource(this.treeControl, this.treeFlattener);\n    this.dataSource.data = files;\n  }\n\n  /** Transform the data to something the tree can read. */\n  transformer(node: FileNode, level: number): FlatTreeNode {\n    return {\n      name: node.name,\n      type: node.type,\n      level,\n      expandable: !!node.children\n    };\n  }\n\n  /** Get the level of the node */\n  getLevel(node: FlatTreeNode): number {\n    return node.level;\n  }\n\n  /** Get whether the node is expanded or not. */\n  isExpandable(node: FlatTreeNode): boolean {\n    return node.expandable;\n  }\n\n  /** Get whether the node has children or not. */\n  hasChild(index: number, node: FlatTreeNode): boolean {\n    return node.expandable;\n  }\n\n  /** Get the children for the node. */\n  getChildren(node: FileNode): FileNode[] | null | undefined {\n    return node.children;\n  }\n}\n",
            "styleUrl": "./tree.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 42
            },
            "extends": [],
            "templateData": "<mat-tree [dataSource]=\"dataSource\" [treeControl]=\"treeControl\">\n  <mat-tree-node *matTreeNodeDef=\"let node\" matTreeNodeToggle matTreeNodePadding>\n    <button mat-icon-button disabled></button>\n    <mat-icon class=\"type-icon\" [attr.aria-label]=\"node.type + 'icon'\">\n      {{ node.type === 'file' ? 'description' : 'folder' }}\n    </mat-icon>\n    {{node.name}}\n  </mat-tree-node>\n\n  <mat-tree-node *matTreeNodeDef=\"let node; when: hasChild\" matTreeNodePadding>\n    <button mat-icon-button matTreeNodeToggle\n            [attr.aria-label]=\"'Toggle ' + node.name\">\n      <mat-icon class=\"mat-icon-rtl-mirror\">\n        {{treeControl.isExpanded(node) ? 'expand_more' : 'chevron_right'}}\n      </mat-icon>\n    </button>\n    <mat-icon class=\"type-icon\" [attr.aria-label]=\"node.type + 'icon'\">\n      {{ node.type ==='file' ? 'description' : 'folder' }}\n    </mat-icon>\n    {{node.name}}\n  </mat-tree-node>\n</mat-tree>\n"
        }
    ],
    "modules": [],
    "miscellaneous": {
        "variables": [
            {
                "name": "appConfig",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app.config.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ApplicationConfig",
                "defaultValue": "{\n    providers: [\n        provideHttpClient(),\n        provideZoneChangeDetection({eventCoalescing: true}),\n        provideRouter(\n            routes,\n            withPreloading(PreloadAllModules),\n            // withInMemoryScrolling({scrollPositionRestoration: 'enabled'})\n        ),\n        provideAnimationsAsync(),\n        {\n            provide:\n            MAT_FORM_FIELD_DEFAULT_OPTIONS,\n            useValue: {\n                floatLabel: 'always',\n                appearance: 'outline',\n            },\n        },\n        {\n            provide: DateAdapter,\n            useClass: MomentDateAdapter,\n        },\n        {\n            provide: MAT_DATE_LOCALE,\n            useValue: 'en-US',\n        },\n        {\n            provide: MAT_DATE_FORMATS,\n            useValue: {\n                parse: {\n                    dateInput: 'YYYY-MM-DD',\n                },\n                display: {\n                    dateInput: 'YYYY-MM-DD',\n                    monthYearLabel: 'LLL yyyy',\n                    dateA11yLabel: 'DD',\n                    monthYearA11yLabel: 'LLLL yyyy',\n                },\n            },\n        },\n        {\n            provide: MAT_MOMENT_DATE_ADAPTER_OPTIONS,\n            useValue: {useUtc: true}\n        },\n\n    ]\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.development.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "IEnvironment",
                "defaultValue": "{\n    production: false,\n    apiUrl: 'http://localhost:4200',\n    version: packageJson.version\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "IEnvironment",
                "defaultValue": "{\n    production: true,\n    apiUrl: 'http://localhost:4200',\n    version: packageJson.version\n}"
            },
            {
                "name": "EXAMPLE_DATA",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/protected/table/table-datasource.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "TableItem[]",
                "defaultValue": "[\n  {id: 1, name: 'Hydrogen'},\n  {id: 2, name: 'Helium'},\n  {id: 3, name: 'Lithium'},\n  {id: 4, name: 'Beryllium'},\n  {id: 5, name: 'Boron'},\n  {id: 6, name: 'Carbon'},\n  {id: 7, name: 'Nitrogen'},\n  {id: 8, name: 'Oxygen'},\n  {id: 9, name: 'Fluorine'},\n  {id: 10, name: 'Neon'},\n  {id: 11, name: 'Sodium'},\n  {id: 12, name: 'Magnesium'},\n  {id: 13, name: 'Aluminum'},\n  {id: 14, name: 'Silicon'},\n  {id: 15, name: 'Phosphorus'},\n  {id: 16, name: 'Sulfur'},\n  {id: 17, name: 'Chlorine'},\n  {id: 18, name: 'Argon'},\n  {id: 19, name: 'Potassium'},\n  {id: 20, name: 'Calcium'},\n]"
            },
            {
                "name": "files",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/protected/tree/example-data.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  {\n    name: 'components',\n    type: 'folder',\n    children: [\n      {\n        name: 'src',\n        type: 'folder',\n        children: [\n          {\n            name: 'cdk',\n            type: 'folder',\n            children: [\n              { name: 'package.json', type: 'file' },\n              { name: 'BUILD.bazel', type: 'file' },\n            ]\n          },\n          { name: 'material', type: 'folder' }\n        ]\n      }\n    ]\n  },\n  {\n    name: 'angular',\n    type: 'folder',\n    children: [\n      {\n        name: 'packages',\n        type: 'folder',\n        children: [\n          { name: '.travis.yml', type: 'file' },\n          { name: 'firebase.json', type: 'file' }\n        ]\n      },\n      { name: 'package.json', type: 'file' }\n    ]\n  },\n  {\n    name: 'angularjs',\n    type: 'folder',\n    children: [\n      { name: 'gulpfile.js', type: 'file' },\n      { name: 'README.md', type: 'file' }\n    ]\n  }\n]",
                "rawdescription": "Example file/folder data.",
                "description": "<p>Example file/folder data.</p>\n"
            }
        ],
        "functions": [
            {
                "name": "compare",
                "file": "src/app/protected/table/table-datasource.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Simple sort comparator for example ID/Name columns (for client-side sorting).</p>\n",
                "args": [
                    {
                        "name": "a",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "b",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "isAsc",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "number",
                "jsdoctags": [
                    {
                        "name": "a",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "b",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "isAsc",
                        "type": "boolean",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        ],
        "typealiases": [],
        "enumerations": [
            {
                "name": "Theme",
                "childs": [
                    {
                        "name": "Dark",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "dark-theme"
                    },
                    {
                        "name": "Light",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "light-theme"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/shared/components/theme-toggle/theme-toggle.component.ts"
            }
        ],
        "groupedVariables": {
            "src/app/app.config.ts": [
                {
                    "name": "appConfig",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app.config.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ApplicationConfig",
                    "defaultValue": "{\n    providers: [\n        provideHttpClient(),\n        provideZoneChangeDetection({eventCoalescing: true}),\n        provideRouter(\n            routes,\n            withPreloading(PreloadAllModules),\n            // withInMemoryScrolling({scrollPositionRestoration: 'enabled'})\n        ),\n        provideAnimationsAsync(),\n        {\n            provide:\n            MAT_FORM_FIELD_DEFAULT_OPTIONS,\n            useValue: {\n                floatLabel: 'always',\n                appearance: 'outline',\n            },\n        },\n        {\n            provide: DateAdapter,\n            useClass: MomentDateAdapter,\n        },\n        {\n            provide: MAT_DATE_LOCALE,\n            useValue: 'en-US',\n        },\n        {\n            provide: MAT_DATE_FORMATS,\n            useValue: {\n                parse: {\n                    dateInput: 'YYYY-MM-DD',\n                },\n                display: {\n                    dateInput: 'YYYY-MM-DD',\n                    monthYearLabel: 'LLL yyyy',\n                    dateA11yLabel: 'DD',\n                    monthYearA11yLabel: 'LLLL yyyy',\n                },\n            },\n        },\n        {\n            provide: MAT_MOMENT_DATE_ADAPTER_OPTIONS,\n            useValue: {useUtc: true}\n        },\n\n    ]\n}"
                }
            ],
            "src/environments/environment.development.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.development.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IEnvironment",
                    "defaultValue": "{\n    production: false,\n    apiUrl: 'http://localhost:4200',\n    version: packageJson.version\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IEnvironment",
                    "defaultValue": "{\n    production: true,\n    apiUrl: 'http://localhost:4200',\n    version: packageJson.version\n}"
                }
            ],
            "src/app/protected/table/table-datasource.ts": [
                {
                    "name": "EXAMPLE_DATA",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/protected/table/table-datasource.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TableItem[]",
                    "defaultValue": "[\n  {id: 1, name: 'Hydrogen'},\n  {id: 2, name: 'Helium'},\n  {id: 3, name: 'Lithium'},\n  {id: 4, name: 'Beryllium'},\n  {id: 5, name: 'Boron'},\n  {id: 6, name: 'Carbon'},\n  {id: 7, name: 'Nitrogen'},\n  {id: 8, name: 'Oxygen'},\n  {id: 9, name: 'Fluorine'},\n  {id: 10, name: 'Neon'},\n  {id: 11, name: 'Sodium'},\n  {id: 12, name: 'Magnesium'},\n  {id: 13, name: 'Aluminum'},\n  {id: 14, name: 'Silicon'},\n  {id: 15, name: 'Phosphorus'},\n  {id: 16, name: 'Sulfur'},\n  {id: 17, name: 'Chlorine'},\n  {id: 18, name: 'Argon'},\n  {id: 19, name: 'Potassium'},\n  {id: 20, name: 'Calcium'},\n]"
                }
            ],
            "src/app/protected/tree/example-data.ts": [
                {
                    "name": "files",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/protected/tree/example-data.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  {\n    name: 'components',\n    type: 'folder',\n    children: [\n      {\n        name: 'src',\n        type: 'folder',\n        children: [\n          {\n            name: 'cdk',\n            type: 'folder',\n            children: [\n              { name: 'package.json', type: 'file' },\n              { name: 'BUILD.bazel', type: 'file' },\n            ]\n          },\n          { name: 'material', type: 'folder' }\n        ]\n      }\n    ]\n  },\n  {\n    name: 'angular',\n    type: 'folder',\n    children: [\n      {\n        name: 'packages',\n        type: 'folder',\n        children: [\n          { name: '.travis.yml', type: 'file' },\n          { name: 'firebase.json', type: 'file' }\n        ]\n      },\n      { name: 'package.json', type: 'file' }\n    ]\n  },\n  {\n    name: 'angularjs',\n    type: 'folder',\n    children: [\n      { name: 'gulpfile.js', type: 'file' },\n      { name: 'README.md', type: 'file' }\n    ]\n  }\n]",
                    "rawdescription": "Example file/folder data.",
                    "description": "<p>Example file/folder data.</p>\n"
                }
            ]
        },
        "groupedFunctions": {
            "src/app/protected/table/table-datasource.ts": [
                {
                    "name": "compare",
                    "file": "src/app/protected/table/table-datasource.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Simple sort comparator for example ID/Name columns (for client-side sorting).</p>\n",
                    "args": [
                        {
                            "name": "a",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "b",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "isAsc",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "number",
                    "jsdoctags": [
                        {
                            "name": "a",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "b",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "isAsc",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        "groupedEnumerations": {
            "src/app/shared/components/theme-toggle/theme-toggle.component.ts": [
                {
                    "name": "Theme",
                    "childs": [
                        {
                            "name": "Dark",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "dark-theme"
                        },
                        {
                            "name": "Light",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "light-theme"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/shared/components/theme-toggle/theme-toggle.component.ts"
                }
            ]
        },
        "groupedTypeAliases": {}
    },
    "routes": [],
    "coverage": {
        "count": 22,
        "status": "low",
        "files": [
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/app.config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "appConfig",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/layout/layout/layout.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LayoutComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/protected/address-form/address-form.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AddressFormComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/protected/dashboard/dashboard.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DashboardComponent",
                "coveragePercent": 33,
                "coverageCount": "1/3",
                "status": "medium"
            },
            {
                "filePath": "src/app/protected/drag-drop/drag-drop.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DragDropComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/protected/table/table-datasource.ts",
                "type": "class",
                "linktype": "classe",
                "name": "TableDataSource",
                "coveragePercent": 55,
                "coverageCount": "5/9",
                "status": "good"
            },
            {
                "filePath": "src/app/protected/table/table-datasource.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "TableItem",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/protected/table/table-datasource.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "compare",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "src/app/protected/table/table-datasource.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "EXAMPLE_DATA",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/protected/table/table.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TableComponent",
                "coveragePercent": 14,
                "coverageCount": "1/7",
                "status": "low"
            },
            {
                "filePath": "src/app/protected/tree/example-data.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "files",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "src/app/protected/tree/tree.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TreeComponent",
                "coveragePercent": 80,
                "coverageCount": "8/10",
                "status": "very-good"
            },
            {
                "filePath": "src/app/protected/tree/tree.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "FileNode",
                "coveragePercent": 25,
                "coverageCount": "1/4",
                "status": "low"
            },
            {
                "filePath": "src/app/protected/tree/tree.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "FlatTreeNode",
                "coveragePercent": 20,
                "coverageCount": "1/5",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/theme-toggle/theme-toggle.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ThemeToggleComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/environments/env.types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IEnvironment",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.development.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 83,
                "coverageCount": "5/6",
                "status": "very-good"
            },
            {
                "filePath": "src/stories/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/stories/page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/stories/user.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "User",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            }
        ]
    }
}